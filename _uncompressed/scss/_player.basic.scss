/**
 * -------------------
 * COLOURS
 *
 * Declare the colour
 * variables we'll use
 * for our player.
 * -------------------
 */

$black:#555;
$white:#ffffff;
$grey:#dad8d2;
$greyDark:darken($grey,20%);
$primary:#ddd;
$highlight:#00b7c6;
$background_grey_dark:#e6e6e6;
$background_grey_light:#f1f1f1;

/**
 * -------------------
 * BOX SHADOW BARS
 *
 * Use box-shadow to
 * create a pattern of
 * repeating stripes.
 * -------------------
 */
@function basic_boxShadow ($n, $colour1, $colour2) {
    $value: 'inset #{$colour1} 0 0 0 0,';
    @for $i from 1 through $n {
        @if ($i % 2 != 0) {
            $value: '#{$value} inset #{$colour2} #{$i}em 0 0 0';
        } @else {
            $value: '#{$value} inset #{$colour1} #{$i}em 0 0 0';
        }
        @if ($i < $n) {
            $value: '#{$value}, ';
        }
    }
    @return unquote($value);
}

/**
 * --------------------
 * SLIDE ANIMATION
 *
 * Simulate an infinite
 * slide-to-the-right
 * effect.
 * --------------------
 */
@keyframes basic_slide{
    0%{ transform:translateX(-2em); }
    100%{ transform:translateX(0); }
}

/**
 * -------------
 * PLAYER STYLES
 *
 * All rules are
 * nested within
 * a theme class
 * name - making
 * switching the
 * themes easy.
 * -------------
 */
.basicPlayer.customAudioPlayer{
    
    // Global
    *,
    *:before,
    *:after{box-sizing:inherit;}
    font-size:10px;
    position:relative;
    box-sizing:border-box;
    overflow:hidden;
    z-index:1;

    // Wrapper
    margin:1em 0;
    height:6em;
    border-radius:.3em;
    box-shadow:rgba(black,.3) 0 .1em .2em 0;

    // The loading-state indicator
    .loader{
        position:absolute;
        bottom:0;
        left:4em;
        right:0;
        height:2em;
        overflow:hidden;
        opacity:0;
        transition:opacity .2s;
        &:before{
            display:block;
            content:'';
            width:200%;
            height:100%;
            position:absolute;
            z-index:1;
            top:0%;
            left:0%;
            transform-origin:center center;
            // Build a repeating striped background.
            box-shadow:basic_boxShadow(100,$primary,darken($primary,10%));
            animation:basic_slide linear infinite .4s;
        }
    }
    
    // Only show the loader when we're loading
    &.loading .loader{
        opacity:1;
    }
    
    // The play-pause button
    .playerTrigger{
        font-size:1em;
        border:none;
        appearance:none;
        width:4em;
        height:6em;
        color:$white;
        background:$black;
        background-image:linear-gradient(lighten($black,10%),$black);
        box-shadow:inset lighten($black,10%) -1px 0 0 0;
        position:absolute;
        top:0;
        left:0;
        cursor:pointer;
        .buttonText{
            display:none;
        }
        &:focus{
            outline:none;
        }
        
        // The "play" icon
        &:before{
            content:'';
            display:block;
            position:absolute;
            top:50%;
            left:50%;
            margin-top:-.8em;
            margin-left:-.4em;
            border-top:.8em solid transparent;
            border-left:1em solid $white;
            border-bottom:.8em solid transparent;
        }
        
        // Hidden right side of "pause" icon (shown when paused)
        &:after{
            content:'';
            display:block;
            position:absolute;
            top:50%;
            right:50%;
            height:1.4em;
            margin-top:-.7em;
            margin-right:-.7em;
            border-top:0;
            border-left:.5em solid $white;
            border-bottom:0;
            opacity:0;
        }
        
        // The left side of the "pause" icon
        &.songPlaying:before{
            height:1.4em;
            margin-top:-.7em;
            margin-left:-.7em;
            border-top:0;
            border-left:.5em solid $white;
            border-bottom:0;
        }
        
        // Make the right side visible
        &.songPlaying:after{
            opacity:1;
        }
    }
    
    // Display song info
    .metaWrapper{
        padding:1em 2em 1em 7em;
        height:4.4em;
        overflow:hidden;
        background:$primary;
        color:$black;
        text-shadow:$white 0 .1em 0;
        background-image:linear-gradient($background_grey_light,$background_grey_dark);
        .titleDisplay{
            display:inline-block;
            line-height:1;
            font-weight:bold;
            margin-right:.5em;
            font-family:monospace;
            &:after{
                content:' â€“ ';
            }
        }
        .artistDisplay{
            font-family:monospace;
            display:inline-block;
            line-height:1;
        }
    }
    
    // Display info about time-played and song-duration
    .timingsWrapper{
        position:absolute;
        bottom:0;
        left:5.6em;
        right:0;
        height:1.6em;
        .songPlayTimer,
        .songDuration{
            position:absolute;
            top:0;
            z-index:3;
            width:4em;
            text-align:center;
            background:transparent;
            color:$white;
            line-height:1;
            height:1em;
            pointer-events:none;
            font-size:1em;
            padding-top:.3em;
            font-family:monospace;
        }
        .songPlayTimer{
            left:0;
        }
        .songDuration{
            right:0;
        }
    }
    // Hide song-timings when we're loading
    &.loading .songPlayTimer,
    &.loading .songDuration{
        display:none;
    }
    
    // The "fake" range slider
    .songProgressSliderWrapper{
        height:2em;
        font-size:1em;
        line-height:1;
        position:absolute;
        top:0;
        left:0;
        width:100%;
        background:$black;
        overflow:hidden;
        border-bottom-right-radius: 0.2em;
        // Make sure the real range element
        // is the same size as the fake one.
        // Position it on-top of the fake and
        // make it invisible (so we can still
        // get the functionality)
        .songProgressSlider{
            width:100%;
            padding:0;
            margin:0;
            position:absolute;
            top:0;
            left:0;
            opacity:0;
        }
        .pseudoProgressIndicator{
            height:2em;
            position:absolute;
            top:0;
            left:0;
            background:rgba($primary,.4);
            width:0%;
        }
        .pseudoProgressPlayhead{
            width:.5em;
            height:2em;
            position:absolute;
            top:0;
            left:0%;
            margin-left:-.2em;
            background:$highlight;
        }
    }

    // Hide dynamic elements until loading has finished
    &.loading .pseudoProgressIndicator,
    &.loading .pseudoProgressPlayhead{
        display:none;
    }

    // Make sure the range Track is the
    // right size and shape. Needs prefixed
    // versions to ensure cross-browser
    // consistency.
    input[type=range].songProgressSlider::-webkit-slider-runnable-track {
      width:100%;
      font-size:1em;
      height:2em;
      cursor:pointer;
    }
    input[type=range].songProgressSlider::-moz-range-track {
      width:100%;
      height:2em;
      cursor:pointer;
    }
    input[type=range].songProgressSlider::-ms-track {
      width:100%;
      height:2em;
      cursor:pointer;
    }
    
    // Position the volume controls
    .songVolume{
        position:absolute;
        top:0;
        left:4em;
        width:1.6em;
        height:6em;
        overflow:hidden;
        z-index:2;
        .songMuteButton{
            display:block;
            width:1.6em;
            height:1.6em;
            font-size:1em;
            color:transparent;
            border:0;
            appearance:none;
            background:$black;
            position:absolute;
            top:0;
            right:0;
            cursor:pointer;
            
            // Rectangle part of "speaker cone" icon
            &:before{
                display:block;
                width:.4em;
                height:.3em;
                position:absolute;
                content:'';
                top:50%;
                right:50%;
                margin-right:-.1em;
                transform:translateY(-50%);
                background:$white;
            }
            
            // Triangle part of "speaker cone" icon
            &:after{
                display:block;
                width:.4em;
                height:.4em;
                position:absolute;
                content:'';
                top:50%;
                margin-top:-.4em;
                right:50%;
                margin-right:-.2em;
                border-top:.4em solid transparent;
                border-right:.4em solid $white;
                border-bottom:.4em solid transparent;
            }
            
            // Change icon when muted
            &.songMuted{
                &:before{
                    background:$grey;
                }
                &:after{
                    border-right-color:$grey;
                }
            }
        }
    }

    .songVolumeValue{
        margin-left:.2em;
    }

    .songVolumeLabelWrapper{
        display:none;
    }
    
    // As with the playback indicator, we're
    // using a range element to power the
    // volume slider functionality
    .songVolumeSliderWrapper{
        display:block;
        height:1.6em;
        position:absolute;
        top:1.6em;
        left:0;
        z-index:3;
        background:$greyDark;
        width:4.4em;
        transform:rotate(90deg) translateY(-100%);
        transform-origin:top left;
        overflow:hidden;
        &:after{
            content:'';
            display:block;
            width:100%;
            border-right:4.4em solid $black;
            border-bottom:1.6em solid transparent;
            position:absolute;
            bottom:0;
            left:0;
            pointer-events:none;
        }

        // Make sure the real range element
        // is the same size as the fake one.
        // Position it on-top of the fake and
        // make it invisible (so we can still
        // get the functionality)
        .songVolumeSlider{
            width:100%;
            padding:0;
            margin:0;
            height:1.6em;
            position:absolute;
            top:0;
            left:0;
            opacity:0;
            transform:rotate(180deg);
        }
        .pseudoVolumeIndicator{
            height:1.6em;
            position:absolute;
            top:0;
            right:0;
            background:$highlight;
            width:100%;
            transform:rotate(180deg);
        }
        .pseudoVolumePlayhead{
            display:none;
        }
    }

    // Make sure the range Track is the
    // right size and shape. Needs prefixed
    // versions to ensure cross-browser
    // consistency.
    input[type=range].songVolumeSlider::-webkit-slider-runnable-track {
      width:100%;
      font-size:1em;
      height:1.5em;
      cursor:pointer;
    }
    input[type=range].songVolumeSlider::-moz-range-track {
      width:100%;
      height:1.5em;
      cursor:pointer;
    }
    input[type=range].songVolumeSlider::-ms-track {
      width:100%;
      height:1.5em;
      cursor:pointer;
    }
}